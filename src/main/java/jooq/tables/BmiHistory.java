/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import jooq.DefaultSchema;
import jooq.Keys;
import jooq.tables.records.BmiHistoryRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class BmiHistory extends TableImpl<BmiHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>bmi_history</code>
     */
    public static final BmiHistory BMI_HISTORY = new BmiHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BmiHistoryRecord> getRecordType() {
        return BmiHistoryRecord.class;
    }

    /**
     * The column <code>bmi_history.id</code>.
     */
    public final TableField<BmiHistoryRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bmi_history.bmi</code>.
     */
    public final TableField<BmiHistoryRecord, Double> BMI = createField(DSL.name("bmi"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>bmi_history.datetime</code>.
     */
    public final TableField<BmiHistoryRecord, LocalDateTime> DATETIME = createField(DSL.name("datetime"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    private BmiHistory(Name alias, Table<BmiHistoryRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private BmiHistory(Name alias, Table<BmiHistoryRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>bmi_history</code> table reference
     */
    public BmiHistory(String alias) {
        this(DSL.name(alias), BMI_HISTORY);
    }

    /**
     * Create an aliased <code>bmi_history</code> table reference
     */
    public BmiHistory(Name alias) {
        this(alias, BMI_HISTORY);
    }

    /**
     * Create a <code>bmi_history</code> table reference
     */
    public BmiHistory() {
        this(DSL.name("bmi_history"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<BmiHistoryRecord> getPrimaryKey() {
        return Keys.BMI_HISTORY__BMI_PK;
    }

    @Override
    public BmiHistory as(String alias) {
        return new BmiHistory(DSL.name(alias), this);
    }

    @Override
    public BmiHistory as(Name alias) {
        return new BmiHistory(alias, this);
    }

    @Override
    public BmiHistory as(Table<?> alias) {
        return new BmiHistory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BmiHistory rename(String name) {
        return new BmiHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BmiHistory rename(Name name) {
        return new BmiHistory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BmiHistory rename(Table<?> name) {
        return new BmiHistory(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BmiHistory where(Condition condition) {
        return new BmiHistory(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BmiHistory where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BmiHistory where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BmiHistory where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BmiHistory where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BmiHistory where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BmiHistory where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BmiHistory where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BmiHistory whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BmiHistory whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
